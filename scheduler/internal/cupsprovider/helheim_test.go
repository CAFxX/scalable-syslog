// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package cupsprovider_test

import (
	"net/http"

	"github.com/cloudfoundry-incubator/scalable-syslog/scheduler/internal/cupsprovider"
)

type mockGetter struct {
	GetCalled chan bool
	GetInput  struct {
		NextID chan int
	}
	GetOutput struct {
		Resp chan *http.Response
		Err  chan error
	}
}

func newMockGetter() *mockGetter {
	m := &mockGetter{}
	m.GetCalled = make(chan bool, 100)
	m.GetInput.NextID = make(chan int, 100)
	m.GetOutput.Resp = make(chan *http.Response, 100)
	m.GetOutput.Err = make(chan error, 100)
	return m
}
func (m *mockGetter) Get(nextID int) (resp *http.Response, err error) {
	m.GetCalled <- true
	m.GetInput.NextID <- nextID
	return <-m.GetOutput.Resp, <-m.GetOutput.Err
}

type mockProvider struct {
	FetchBindingsCalled chan bool
	FetchBindingsOutput struct {
		Bindings chan map[string]cupsprovider.Binding
		Err      chan error
	}
}

func newMockProvider() *mockProvider {
	m := &mockProvider{}
	m.FetchBindingsCalled = make(chan bool, 100)
	m.FetchBindingsOutput.Bindings = make(chan map[string]cupsprovider.Binding, 100)
	m.FetchBindingsOutput.Err = make(chan error, 100)
	return m
}
func (m *mockProvider) FetchBindings() (bindings map[string]cupsprovider.Binding, err error) {
	m.FetchBindingsCalled <- true
	return <-m.FetchBindingsOutput.Bindings, <-m.FetchBindingsOutput.Err
}

type mockStore struct {
	StoreBindingsCalled chan bool
	StoreBindingsInput  struct {
		Bindings chan map[string]cupsprovider.Binding
	}
}

func newMockStore() *mockStore {
	m := &mockStore{}
	m.StoreBindingsCalled = make(chan bool, 100)
	m.StoreBindingsInput.Bindings = make(chan map[string]cupsprovider.Binding, 100)
	return m
}
func (m *mockStore) StoreBindings(bindings map[string]cupsprovider.Binding) {
	m.StoreBindingsCalled <- true
	m.StoreBindingsInput.Bindings <- bindings
}
