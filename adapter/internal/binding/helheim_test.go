// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package binding_test

import v1 "github.com/cloudfoundry-incubator/scalable-syslog/api/v1"

type mockSubscriber struct {
	StartCalled chan bool
	StartInput  struct {
		Binding chan *v1.Binding
	}
	StartOutput struct {
		StopFunc chan func()
	}
}

func newMockSubscriber() *mockSubscriber {
	m := &mockSubscriber{}
	m.StartCalled = make(chan bool, 100)
	m.StartInput.Binding = make(chan *v1.Binding, 100)
	m.StartOutput.StopFunc = make(chan func(), 100)
	return m
}
func (m *mockSubscriber) Start(binding *v1.Binding) (stopFunc func()) {
	m.StartCalled <- true
	m.StartInput.Binding <- binding
	return <-m.StartOutput.StopFunc
}

type mockBindingStore struct {
	AddCalled chan bool
	AddInput  struct {
		Binding chan *v1.Binding
	}
	DeleteCalled chan bool
	DeleteInput  struct {
		Binding chan *v1.Binding
	}
	ListCalled chan bool
	ListOutput struct {
		Bindings chan []*v1.Binding
	}
}

func newMockBindingStore() *mockBindingStore {
	m := &mockBindingStore{}
	m.AddCalled = make(chan bool, 100)
	m.AddInput.Binding = make(chan *v1.Binding, 100)
	m.DeleteCalled = make(chan bool, 100)
	m.DeleteInput.Binding = make(chan *v1.Binding, 100)
	m.ListCalled = make(chan bool, 100)
	m.ListOutput.Bindings = make(chan []*v1.Binding, 100)
	return m
}
func (m *mockBindingStore) Add(binding *v1.Binding) {
	m.AddCalled <- true
	m.AddInput.Binding <- binding
}
func (m *mockBindingStore) Delete(binding *v1.Binding) {
	m.DeleteCalled <- true
	m.DeleteInput.Binding <- binding
}
func (m *mockBindingStore) List() (bindings []*v1.Binding) {
	m.ListCalled <- true
	return <-m.ListOutput.Bindings
}
