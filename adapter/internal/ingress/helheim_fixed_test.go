// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package ingress_test

import (
	"golang.org/x/net/context"

	"code.cloudfoundry.org/scalable-syslog/adapter/internal/egress"
	v2 "code.cloudfoundry.org/scalable-syslog/internal/api/loggregator/v2"
	v1 "code.cloudfoundry.org/scalable-syslog/internal/api/v1"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

type mockClientPool struct {
	NextCalled chan bool
	NextOutput struct {
		Client chan v2.EgressClient
	}
}

func newMockClientPool() *mockClientPool {
	m := &mockClientPool{}
	m.NextCalled = make(chan bool, 100)
	m.NextOutput.Client = make(chan v2.EgressClient, 100)
	return m
}
func (m *mockClientPool) Next() (client v2.EgressClient) {
	m.NextCalled <- true
	return <-m.NextOutput.Client
}

type mockSyslogConnector struct {
	ConnectCalled chan bool
	ConnectInput  struct {
		Binding chan *v1.Binding
	}
	ConnectOutput struct {
		Cw  chan egress.WriteCloser
		Err chan error
	}
}

func newMockSyslogConnector() *mockSyslogConnector {
	m := &mockSyslogConnector{}
	m.ConnectCalled = make(chan bool, 100)
	m.ConnectInput.Binding = make(chan *v1.Binding, 100)
	m.ConnectOutput.Cw = make(chan egress.WriteCloser, 100)
	m.ConnectOutput.Err = make(chan error, 100)
	return m
}
func (m *mockSyslogConnector) Connect(binding *v1.Binding) (cw egress.WriteCloser, err error) {
	m.ConnectCalled <- true
	m.ConnectInput.Binding <- binding
	return <-m.ConnectOutput.Cw, <-m.ConnectOutput.Err
}

type mockReceiverClient struct {
	RecvCalled chan bool
	RecvOutput struct {
		Ret0 chan *v2.Envelope
		Ret1 chan error
	}
	HeaderCalled chan bool
	HeaderOutput struct {
		Ret0 chan metadata.MD
		Ret1 chan error
	}
	TrailerCalled chan bool
	TrailerOutput struct {
		Ret0 chan metadata.MD
	}
	CloseSendCalled chan bool
	CloseSendOutput struct {
		Ret0 chan error
	}
	ContextCalled chan bool
	ContextOutput struct {
		Ret0 chan context.Context
	}
	SendMsgCalled chan bool
	SendMsgInput  struct {
		M chan interface{}
	}
	SendMsgOutput struct {
		Ret0 chan error
	}
	RecvMsgCalled chan bool
	RecvMsgInput  struct {
		M chan interface{}
	}
	RecvMsgOutput struct {
		Ret0 chan error
	}
}

func newMockReceiverClient() *mockReceiverClient {
	m := &mockReceiverClient{}
	m.RecvCalled = make(chan bool, 100)
	m.RecvOutput.Ret0 = make(chan *v2.Envelope, 100)
	m.RecvOutput.Ret1 = make(chan error, 100)
	m.HeaderCalled = make(chan bool, 100)
	m.HeaderOutput.Ret0 = make(chan metadata.MD, 100)
	m.HeaderOutput.Ret1 = make(chan error, 100)
	m.TrailerCalled = make(chan bool, 100)
	m.TrailerOutput.Ret0 = make(chan metadata.MD, 100)
	m.CloseSendCalled = make(chan bool, 100)
	m.CloseSendOutput.Ret0 = make(chan error, 100)
	m.ContextCalled = make(chan bool, 100)
	m.ContextOutput.Ret0 = make(chan context.Context, 100)
	m.SendMsgCalled = make(chan bool, 100)
	m.SendMsgInput.M = make(chan interface{}, 100)
	m.SendMsgOutput.Ret0 = make(chan error, 100)
	m.RecvMsgCalled = make(chan bool, 100)
	m.RecvMsgInput.M = make(chan interface{}, 100)
	m.RecvMsgOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockReceiverClient) Recv() (*v2.Envelope, error) {
	m.RecvCalled <- true
	return <-m.RecvOutput.Ret0, <-m.RecvOutput.Ret1
}
func (m *mockReceiverClient) Header() (metadata.MD, error) {
	m.HeaderCalled <- true
	return <-m.HeaderOutput.Ret0, <-m.HeaderOutput.Ret1
}
func (m *mockReceiverClient) Trailer() metadata.MD {
	m.TrailerCalled <- true
	return <-m.TrailerOutput.Ret0
}
func (m *mockReceiverClient) CloseSend() error {
	m.CloseSendCalled <- true
	return <-m.CloseSendOutput.Ret0
}
func (m *mockReceiverClient) Context() context.Context {
	m.ContextCalled <- true
	return <-m.ContextOutput.Ret0
}
func (m *mockReceiverClient) SendMsg(m_ interface{}) error {
	m.SendMsgCalled <- true
	m.SendMsgInput.M <- m_
	return <-m.SendMsgOutput.Ret0
}
func (m *mockReceiverClient) RecvMsg(m_ interface{}) error {
	m.RecvMsgCalled <- true
	m.RecvMsgInput.M <- m_
	return <-m.RecvMsgOutput.Ret0
}

type mockEgressClient struct {
	ReceiverCalled chan bool
	ReceiverInput  struct {
		Ctx  chan context.Context
		In   chan *v2.EgressRequest
		Opts chan []grpc.CallOption
	}
	ReceiverOutput struct {
		Ret0 chan v2.Egress_ReceiverClient
		Ret1 chan error
	}
}

func newMockEgressClient() *mockEgressClient {
	m := &mockEgressClient{}
	m.ReceiverCalled = make(chan bool, 100)
	m.ReceiverInput.Ctx = make(chan context.Context, 100)
	m.ReceiverInput.In = make(chan *v2.EgressRequest, 100)
	m.ReceiverInput.Opts = make(chan []grpc.CallOption, 100)
	m.ReceiverOutput.Ret0 = make(chan v2.Egress_ReceiverClient, 100)
	m.ReceiverOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockEgressClient) Receiver(ctx context.Context, in *v2.EgressRequest, opts ...grpc.CallOption) (v2.Egress_ReceiverClient, error) {
	m.ReceiverCalled <- true
	m.ReceiverInput.Ctx <- ctx
	m.ReceiverInput.In <- in
	m.ReceiverInput.Opts <- opts
	return <-m.ReceiverOutput.Ret0, <-m.ReceiverOutput.Ret1
}

type mockWriteCloser struct {
	WriteCalled chan bool
	WriteInput  struct {
		Arg0 chan *v2.Envelope
	}
	WriteOutput struct {
		Ret0 chan error
	}
	CloseCalled chan bool
	CloseOutput struct {
		Ret0 chan error
	}
}

func newMockWriteCloser() *mockWriteCloser {
	m := &mockWriteCloser{}
	m.WriteCalled = make(chan bool, 100)
	m.WriteInput.Arg0 = make(chan *v2.Envelope, 100)
	m.WriteOutput.Ret0 = make(chan error, 100)
	m.CloseCalled = make(chan bool, 100)
	m.CloseOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockWriteCloser) Write(arg0 *v2.Envelope) error {
	m.WriteCalled <- true
	m.WriteInput.Arg0 <- arg0
	return <-m.WriteOutput.Ret0
}
func (m *mockWriteCloser) Close() error {
	m.CloseCalled <- true
	return <-m.CloseOutput.Ret0
}
